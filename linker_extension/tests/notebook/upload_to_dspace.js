var system = require("system");
var fs = require("fs");

casper.notebook_test(function() {
    "use strict";

    casper.test.info("Testing uploading notebook to DSpace");

    this.viewport(1024, 768);

    var username = "";
    var password = "";
    this.then(function() {
        var path_parts = fs.absolute(this.test.currentTestFile).split("/");
        path_parts.pop();
        path_parts.pop();
        var test_path = path_parts.join("/") + "/";

        if (fs.exists(test_path + "login_credentials.txt")) {
            var text = fs.read(test_path + "login_credentials.txt");
            var lines = text.split(/\r\n|[\r\n]/g);
            username = lines[1];
            password = lines[3];
        }
        if (username == "[Your Username Here]" || username == "" &&
            password == "[Your Password Here]" || username == "") 
        {
            system.stdout.writeLine("Username: ");
            username = system.stdin.readLine();
            system.stdout.writeLine("Password: ");
            password = system.stdin.readLine();
            system.stdout.write("\x1b[1APassword                           \n");
        }
    });

    //wait for notebook to load
    this.waitFor(this.kernel_running);
    this.waitFor(function() {
        return this.evaluate(function () {
            return Jupyter && Jupyter.notebook && true;
        });
    });

    var nbname = "Untitled.ipynb";

    this.thenEvaluate(function (nbname) {
        require(["base/js/events"], function (events) {
            Jupyter.notebook.set_notebook_name(nbname);
            var md = Jupyter.notebook.metadata;
            md.reportmetadata = {
                "abstract": "A test item generated by upload_to_dspace.js " + 
                            "If you can see this then the delete part of the " + 
                            "test isn't working",
                "referencedBy": [
                  "Test"
                ],
                "tags": [
                  "Test"
                ],
                "language": "en",
                "authors": [
                  [
                    "McTestface",
                    "Testy"
                  ]
                ],
                "date": "2016-11-14",
                "title": "TO BE DELETED",
                "repository": "edata/8",
                "publisher":"Publisheroni",
                "citations":[
                  "citation1",
                  "citation2",
                ],
                "licence": {
                    "preset": "CC0",
                    "url": "",
                }
            };
            Jupyter._save_success = Jupyter._save_failed = false;
            events.on("notebook_saved.Notebook", function () {
                Jupyter._save_success = true;
            });
            events.on("notebook_save_failed.Notebook", function (event, error) {
                Jupyter._save_failed = "save failed with " + error;
            });
            Jupyter.notebook.save_notebook();
        });
    }, {nbname:nbname});
    
    this.waitFor(function () {
        return this.evaluate(function(){
            return Jupyter._save_failed || Jupyter._save_success;
        });
    });

    this.then(function(){
        var success_failure = this.evaluate(function(){
            return [Jupyter._save_success, Jupyter._save_failed];
        });
        this.test.assertEquals(success_failure[1], false, "Save did not fail");
        this.test.assertEquals(success_failure[0], true, "Save OK");
    });

    //Click on menu item
    var selector = "#sword_new_item > a";
    this.waitForSelector(selector);
    this.thenClick(selector);

    this.waitForSelector("#username-new-item");
    this.then(function() {
        this.evaluate(function(un,pw) {
            $("#username-new-item").val(un);
            $("#password-new-item").val(pw);
        }, username, password);
    });

    var button = ".btn-primary";
    this.waitForSelector(button);
    this.thenClick(button);

    var alert = ".alert";
    this.waitForSelector(alert);
    this.then(function() {
        var alert_element = this.getElementAttribute(alert,"class");
        this.test.assertEquals(alert_element,
                               "alert alert-dismissible fade in alert-success",
                               "Success alert seen");
    });
    
    var id = "";

    this.then(function() {
        this.evaluate(function(un,pw) {
            var id_url = $(".alert-success").attr("item-id");
            var nb_utils = require("base/js/utils");
            var request_url = nb_utils.url_path_join(Jupyter.notebook.base_url,
                                                     "/dspace/findid");
            var settings = {
                processData : false,
                cache : false,
                type : "POST",
                contentType: "application/json",
                data: JSON.stringify({"ID":id_url,
                                      "username": un,
                                      "password": pw}),
            };
            var request = nb_utils.promising_ajax(request_url, settings);
            request.then(function(result) {
                $(document.body).append($("<div/>")
                                            .attr("id","test-item-id")
                                            .attr("item-id",result.id));
            });
        }, username, password);
    });

    this.waitForSelector("#test-item-id");


    this.then(function() {
        id = this.getElementAttribute("#test-item-id","item-id");
        this.test.assertNotEquals(
            id,
            null,
            "The item exists in DSpace with the ID " + id
        );
    });

    this.then(function() {
        this.evaluate(function(id,un,pw) {
            var nb_utils = require("base/js/utils");
            var request_url = nb_utils.url_path_join(Jupyter.notebook.base_url,
                                                     "/dspace/delete");
            var settings = {
                processData : false,
                type : "POST",
                contentType: "application/json",
                data: JSON.stringify({"ID":id, "username": un, "password": pw}),
            };
            var request = nb_utils.promising_ajax(request_url, settings);

            request.then(function(result) {
                $(document.body).append($("<div/>")
                                            .attr("id","test-delete-status")
                                            .attr("status-code",result));
            });
        }, id, username, password);
    });

    this.waitForSelector("#test-delete-status");

    this.then(function() {
        var delete_status_code = this.getElementAttribute("#test-delete-status",
                                                          "status-code");
        this.test.assertEquals(
            delete_status_code,
            "404",
            "Item not found in DSpace so successfully deleted"
        );
    });

});
