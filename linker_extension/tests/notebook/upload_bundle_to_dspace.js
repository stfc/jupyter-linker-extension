


casper.notebook_test(function() {
    "use strict";

    casper.test.info("Testing uploading data bundle to DSpace");

    this.viewport(1024, 768);

    //wait for notebook to load
    this.waitFor(this.kernel_running);
    this.waitFor(function() {
        return this.evaluate(function () {
            return Jupyter && Jupyter.notebook && true;
        });
    });

    var nbname = "Untitled.ipynb";

    this.thenEvaluate(function (nbname) {
        require(['base/js/events'], function (events) {
            Jupyter.notebook.set_notebook_name(nbname);
            var md = Jupyter.notebook.metadata;
            md.reportmetadata = {
                "abstract": "A test item generated by upload_bundle_to_dspace.js If you can see this then the delete part of the test isn't working",
                "referencedBy": [
                  "Test"
                ],
                "tags": [
                  "Test"
                ],
                "language": "en",
                "authors": [
                  [
                    "McTestface",
                    "Testy"
                  ]
                ],
                "date": "2016-11-14",
                "title": "BUNDLE TO BE DELETED",
                "repository": "edata/8",
            };
            md.databundle = [
                {
                  "type": "directory",
                  "mimetype": null,
                  "format": "json",
                  "content": [
                    {
                      "type": "directory",
                      "mimetype": null,
                      "format": null,
                      "content": null,
                      "path": "sub ∂ir1/sub ∂ir 1a",
                      "writable": true,
                      "name": "sub ∂ir 1a",
                    },
                    {
                      "type": "file",
                      "mimetype": null,
                      "format": null,
                      "content": null,
                      "path": "sub ∂ir1/file_in_sub_∂ir1.txt",
                      "writable": true,
                      "name": "file_in_sub_∂ir1.txt",
                    }
                  ],
                  "path": "sub ∂ir1",
                  "writable": true,
                  "name": "sub ∂ir1",
                },
                {
                  "type": "file",
                  "mimetype": "text/plain",
                  "format": "text",
                  "content": "",
                  "path": "file_in_nbdir.txt",
                  "writable": true,
                  "name": "file_in_nbdir.txt",
                },
                {
                  "type": "directory",
                  "mimetype": null,
                  "format": "json",
                  "content": [
                    {
                      "type": "file",
                      "mimetype": null,
                      "format": null,
                      "content": null,
                      "path": "sub ∂ir1/sub ∂ir 1a/file_in_sub_∂ir1a.txt",
                      "writable": true,
                      "name": "file_in_sub_∂ir1a.txt",
                    }
                  ],
                  "path": "sub ∂ir1/sub ∂ir 1a",
                  "writable": true,
                  "name": "sub ∂ir 1a",
                },
                {
                  "type": "file",
                  "mimetype": "text/plain",
                  "format": "text",
                  "content": "",
                  "path": "sub ∂ir1/file_in_sub_∂ir1.txt",
                  "writable": true,
                  "name": "file_in_sub_∂ir1.txt",
                },
                {
                  "type": "file",
                  "mimetype": "text/plain",
                  "format": "text",
                  "content": "",
                  "path": "sub ∂ir1/sub ∂ir 1a/file_in_sub_∂ir1a.txt",
                  "writable": true,
                  "name": "file_in_sub_∂ir1a.txt",
                }
            ];
            Jupyter._save_success = Jupyter._save_failed = false;
            events.on('notebook_saved.Notebook', function () {
                Jupyter._save_success = true;
            });
            events.on('notebook_save_failed.Notebook',
                function (event, error) {
                    Jupyter._save_failed = "save failed with " + error;
            });
            Jupyter.notebook.save_notebook();
        });
    }, {nbname:nbname});
    
    this.waitFor(function () {
        return this.evaluate(function(){
            return Jupyter._save_failed || Jupyter._save_success;
        });
    });

    this.then(function(){
        var success_failure = this.evaluate(function(){
            return [Jupyter._save_success, Jupyter._save_failed];
        });
        this.test.assertEquals(success_failure[1], false, "Save did not fail");
        this.test.assertEquals(success_failure[0], true, "Save OK");
    });

    //Click on menu item
    var selector = '#upload_data > a';
    this.waitForSelector(selector);
    this.thenClick(selector);

    //add check here for dialog correctness
    this.waitForSelector('#data_abstract');
    
    this.then(function() {
        var test_textarea_val = this.evaluate(function() {
            return $('#data_abstract').val();
        });
        var correct_textarea_str = "file_in_nbdir.txt\n\nfile_in_sub_∂ir1.txt\n\nfile_in_sub_∂ir1a.txt";
        this.test.assertEquals(test_textarea_val,correct_textarea_str,"Default string in abstract form field correct");
    });

    this.thenClick("#add-url-button");
    this.thenEvaluate(function() {
        $('data_referencedBy-0').val("URL1");
        $('data_referencedBy-1').val("URL2");
    });

    var button = ".btn-primary";
    this.waitForSelector(button);
    this.thenClick(button);

    var alert = '.alert';
    this.waitForSelector(alert);
    this.then(function() {
        var alert_element = this.getElementAttribute(alert,'class');
        this.test.assertEquals(alert_element,"alert alert-dismissible fade in alert-success","Success alert seen");
    });

    //check that we got the url reference back
    this.then(function() {
        var bundle_url_exists = this.evaluate(function() {
            return ("databundle_url" in Jupyter.notebook.metadata);
        });

        this.test.assert(bundle_url_exists,"databundle_url exists in metadata");

        var bundle_url = this.evaluate(function() {
            return Jupyter.notebook.metadata.databundle_url;
        });

        this.test.assertTruthy(bundle_url,"databundle_url is not empty");
    });
    
    var id = "";

    this.then(function() {
        this.evaluate(function() {
            var id_url = $('.alert-success').attr("item-id");

            var request_url = require("base/js/utils").url_path_join.apply(null,[Jupyter.notebook.base_url, '/dspacetest']);
            var settings = {
                processData : false,
                cache : false,
                type : "GET",
                dataType : "json",
            };
            var request = require("base/js/utils").promising_ajax(request_url + '?' + $.param({"ID":id_url}), settings);
            request.then(function(result) {
                $(document.body).append($('<div/>').attr('id','test-item-id').attr('item-id',result.id));
            });
        });
    });

    this.waitForSelector("#test-item-id");


    this.then(function() {
        id = this.getElementAttribute('#test-item-id',"item-id");
        this.test.assertNotEquals(id,"","The item exists in DSpace with the ID " + id);
    });

    this.then(function() {
        this.evaluate(function(id) {
            var request_url = require("base/js/utils").url_path_join.apply(null,[Jupyter.notebook.base_url, '/dspacetest']);
            var settings = {
                processData : false,
                cache : false,
                type : "PUT",
                dataType : "json",
            };
            var request = require("base/js/utils").promising_ajax(request_url + '?' + $.param({"ID":id}), settings);

            request.then(function(result) {
                for (var key in result) {
                    var item = result[key];
                    if(item.bundleName === "ORIGINAL") { //don't check the license or sword package file because cba (if they're wrong it's something wrong with SWORD and not me)
                        $(document.body).append($('<div/>').addClass("test-bitstream-id").attr('item-id',item.id));
                    }
                }
            });
        }, {id:id});
    });

    this.waitForSelector('.test-bitstream-id');

    this.then(function() {
        this.evaluate(function() {
            var bitstreams = $('.test-bitstream-id');
            var IDs = [];
            bitstreams.each(function(index,item) {
                IDs.push($(item).attr('item-id'));
            });

            var request_url = require("base/js/utils").url_path_join.apply(null,[Jupyter.notebook.base_url, '/dspacetest']);
            var settings = {
                processData : false,
                cache : false,
                type : "POST",
            };
            var request = require("base/js/utils").promising_ajax(request_url + '?' + $.param({"IDs":IDs}), settings);

            request.then(function(result) {
                for (var key in result) {
                    $(document.body).append($('<div/>').addClass('test-bitstream-content').attr('bitstream-content',result[key]));
                }
            });
        });
    });

    this.waitForSelector('.test-bitstream-content');

    this.then(function() {
        var bitstream_data = this.getElementsAttribute('.test-bitstream-content','bitstream-content');
        this.test.assertNotEquals(bitstream_data.indexOf("Text in file_in_nbdir.txt"),-1,"file_in_nbdir.txt has correct content");
        this.test.assertNotEquals(bitstream_data.indexOf("Text in file_in_sub_dir1.txt"),-1,"file_in_sub_dir1.txt has correct content");
        this.test.assertNotEquals(bitstream_data.indexOf("Text in file_in_sub_dir1a.txt"),-1,"file_in_sub_dir1a.txt has correct content");
    });

    var delete_once_finished = true; //used for testing the test

    if (delete_once_finished) {
        this.then(function() {
            this.evaluate(function(id) {
                var request_url = require("base/js/utils").url_path_join.apply(null,[Jupyter.notebook.base_url, '/dspacetest']);
                var settings = {
                    processData : false,
                    type : "DELETE",
                    dataType : "json",
                };
                var request = require("base/js/utils").promising_ajax(request_url + '?' + $.param({"ID":id}), settings);

                request.then(function(result) {
                    $(document.body).append($('<div/>').attr('id','test-delete-status').attr('status-code',result));
                });
            }, {id:id});
        });

        this.waitForSelector("#test-delete-status");

        this.then(function() {
            var delete_status_code = this.getElementAttribute('#test-delete-status',"status-code");
            this.test.assertEquals(delete_status_code,"404","Item not found in DSpace so successfully deleted");
        });
    }
});