var system = require("system");
var fs = require("fs");
var screenshot_dir = "screenshots/publish/";

casper.notebook_test(function() {
    "use strict";

    casper.test.info("Testing the publish data button and dialog");

    var screenshot_index = 1;
    
    function take_screenshot(name) {
    	var index_string = screenshot_index.toString();
        casper.then(function () {
            casper.capture(screenshot_dir + index_string +
            		       ". " + name + ".png");
        });
        
        screenshot_index++;
    }
    
    this.viewport(1024, 768);

    var path_parts = fs.absolute(this.test.currentTestFile).split("/");
    path_parts.pop();
    path_parts.pop();
    var test_path = path_parts.join("/") + "/";

    var username = "";
    var password = "";

    this.evaluate(function() {
        var nb_utils = require("base/js/utils");
        var request_url = nb_utils.url_path_join(Jupyter.notebook.base_url,
                                                 "/linker_config");
        var settings = {
            processData : false,
            cache : false,
            type : "POST",
            contentType: "application/json",
            data: JSON.stringify({"username": ""}),
        };
        var request = nb_utils.promising_ajax(request_url, settings);
    });

    //we need username and password to authenticate with dspace
    //so either read the info via the login_credentials text file
    //or prompt the user for their username and password
    this.then(function() {
        if (fs.exists(test_path + "login_credentials.txt")) {
            var text = fs.read(test_path + "login_credentials.txt");
            var lines = text.split(/\r\n|[\r\n]/g);
            username = lines[1];
            password = lines[3];
        }
        if (username == "[Your Username Here]" || username == "" &&
            password == "[Your Password Here]" || username == "") 
        {
            system.stdout.writeLine("Username: ");
            username = system.stdin.readLine();
            system.stdout.writeLine("Password: ");
            password = system.stdin.readLine();
            system.stdout.write("\x1b[1APassword                           \n");
        }
    });

    var nbname = "test_publish_data.ipynb";

    //fill in some dummy metadata
    this.thenEvaluate(function (nbname) {
        require(["base/js/events"], function (events) {
            Jupyter.notebook.set_notebook_name(nbname);
            var md = Jupyter.notebook.metadata;
            md.reportmetadata = {
                "abstract": "A test item generated by publish_data.js" + 
                            "If you can see this then the delete part of the " +
                            "test isn't working",
                "referencedBy": [
                  "Test1",
                  "Test2"
                ],
                "tags": [
                  "Test"
                ],
                "language": "en",
                "authors": [
                  [
                    "McTestface",
                    "Testy"
                  ]
                ],
                "date": "2016-11-14",
                "title": "BUNDLE TO BE DELETED",
                "department": "12",
                "repository": "edata/8",
                "publisher":"Publisheroni",
                "citations":[
                  "citation1",
                  "citation2",
                ],
                "licence": "CC0",
                "TOS": [
                    {
                	    "name": "TestTOS1.txt",
                	    "path": "TestTOS1.txt",
                	    "mimetype": "text/plain"
                    },
                    {
                	    "name": "TestTOS2.txt",
                	    "path": "TestTOS2.txt",
                	    "mimetype": null
                    },
                ],
            };
            Jupyter._save_success = Jupyter._save_failed = false;
            events.on("notebook_saved.Notebook", function () {
                Jupyter._save_success = true;
            });
            events.on("notebook_save_failed.Notebook", function (event, error) {
                    Jupyter._save_failed = "save failed with " + error;
            });
            Jupyter.notebook.save_notebook();
        });
    }, {nbname:nbname});
    
    this.waitFor(function () {
        return this.evaluate(function(){
            return Jupyter._save_failed || Jupyter._save_success;
        });
    });

    this.then(function(){
        var success_failure = this.evaluate(function(){
            return [Jupyter._save_success, Jupyter._save_failed];
        });
        this.test.assertEquals(success_failure[1], false, "Save did not fail");
        this.test.assertEquals(success_failure[0], true, "Save OK");
    });

    //Click on menu item
    var selector = "#publish > a";
    this.waitForSelector(selector);
    this.thenClick(selector);
    
    // Wait for the dialog to be shown
    this.waitUntilVisible(".modal-body");
    this.wait(200);

    //add check here for dialog correctness, also to wait for files to be loaded
    this.waitForSelector("#files-loading-publish");
    this.waitWhileVisible("#files-loading-publish");

    take_screenshot("open-dialogue");
    
    //check that validation works
    this.thenClick("#next");
    this.then(function() {
        this.test.assertVisible("#data-files-missing-error-publish",
                                "Data files missing error showing correctly");
    });

    take_screenshot("data-missing-error");
    
    //check that validation works, even after uploading a file then deleting
    this.thenEvaluate(function() {
        $("#file-tree-publish li > a[title=\"file_in_nbdir.txt\"]").prev(".button.chk").click();
    });

    this.thenEvaluate(function() {
        $("#file-tree-publish li > a[title=\"file_in_nbdir.txt\"]").prev(".button.chk").click();
    });
    this.thenClick("#next");
    this.then(function() {
        this.test.assertVisible("#data-files-missing-error-publish",
                                "Data files missing error showing correctly after file upload and delete");
    });

    //select files for test
    this.thenEvaluate(function() {
        $("#file-tree-publish li > a[title=\"file_in_nbdir.txt\"]").prev(".button.chk").click();
        $("#file-tree-publish li > a[title=\"sub âˆ‚ir1\"]").prev(".button.chk").click();
    });

    this.waitForSelector("#files-loading-publish");
    this.waitWhileVisible("#files-loading-publish");
    
    take_screenshot("files-selected");

    this.thenClick("#next");
    this.waitUntilVisible("#nb-abstract");
    take_screenshot("second-page");
    
    this.thenClick("#next");  
    take_screenshot("third-page");
    
    this.thenClick("#next");
    this.waitForSelector("#username");
    take_screenshot("fourth-page");
    
    //test login errors

    this.thenClick("#next");
    this.waitUntilVisible(".login-error");
    take_screenshot("missing-details-error");
    
    this.then(function() {
        var msg = this.evaluate(function() {
            return $(".login-error").text();
        });
        this.test.assertEquals(
            msg,
            "Please enter a username and password",
            "Username and password missing error correct");
    });

    this.then(function() {
        this.evaluate(function() {
            $("#username").val("fakeusername");
        });
    });

    this.thenClick("#next");
    this.waitUntilVisible(".login-error");

    take_screenshot("missing-password-error");
    
    this.then(function() {
        var msg = this.evaluate(function() {
            return $(".login-error").text();
        });
        this.test.assertEquals(
            msg,
            "Please enter a password",
            "Password missing error correct");
    });

    this.then(function() {
        this.evaluate(function() {
            $("#username").val("");
            $("#password").val("not a real password");
        });
    });

    this.thenClick("#next");
    this.waitUntilVisible(".login-error");
    take_screenshot("missing-username-error");

    this.then(function() {
        var msg = this.evaluate(function() {
            return $(".login-error").text();
        });
        this.test.assertEquals(
            msg,
            "Please enter a username",
            "Username missing error correct");
    });

    this.then(function() {
        this.evaluate(function() {
            $("#username").val("bad*username");
            $("#password").val("not a real password");
        });
    });

    this.thenClick("#next");
    this.waitUntilVisible(".login-error");

    this.then(function() {
        var msg = this.evaluate(function() {
            return $(".login-error").text();
        });
        this.test.assertEquals(
            msg,
            "Invalid username. If the error persists, please contact the developers",
            "Invalid username error correct");
    });
    
    take_screenshot("invalid-username-error");

    this.then(function() {
        this.evaluate(function() {
            $("#username").val("fakeusername");
            $("#password").val("not a real password");
        });
    });

    this.thenClick("#next");
    this.waitUntilVisible(".login-error");

    this.then(function() {
        var msg = this.evaluate(function() {
            return $(".login-error").text();
        });
        this.test.assertEquals(
            msg,
            "The username and password combination " +
            "entered is incorrect - please try " +
            "again. If the error persists, please " +
            "contact the developers",
            "Invalid login error correct");
    });
    
    take_screenshot("incorrect-username-error");

    this.then(function() {
        this.evaluate(function(un,pw) {
            $("#username").val(un);
            $("#password").val(pw);
        }, username, password);
    });

    this.thenClick("#next");

    this.then(function() {
        this.test.assertNotVisible(".login-error","Login validation correct");
    });
    
    take_screenshot("successful-submit");

    //check that we see the success alert
    var alert = ".alert";
    this.waitForSelector(alert);
    this.then(function() {
        this.test.assertExists(".data-upload-success-alert",
                               "Data upload success alert seen");
    });
    
    take_screenshot("success-alert");

    //check that we got the url reference back
    this.then(function() {
        var bundle_url_exists = this.evaluate(function() {
            return ("databundle_url" in Jupyter.notebook.metadata);
        });

        this.test.assert(bundle_url_exists,"databundle_url exists in metadata");

        var bundle_url = this.evaluate(function() {
            return Jupyter.notebook.metadata.databundle_url;
        });

        this.test.assertTruthy(bundle_url,"databundle_url is not empty");
    });
    
    //find the item in dspace by id
    var id = "";

    this.then(function() {
        this.evaluate(function(un,pw) {
            var id_url = $(".alert-success").attr("item-id");
            var nb_utils = require("base/js/utils");

            var request_url = nb_utils.url_path_join(Jupyter.notebook.base_url,
                                                     "/dspace/findid");
            var settings = {
                processData : false,
                cache : false,
                type : "POST",
                contentType: "application/json",
                data: JSON.stringify({"ID":id_url,
                                      "username": un,
                                      "password": pw}),
            };
            var request = nb_utils.promising_ajax(request_url, settings);
            request.then(function(result) {
                $(document.body).append($("<div/>")
                                            .attr("id","test-item-id")
                                            .attr("item-id",result.id));
            });
        }, username, password);
    });

    this.waitForSelector("#test-item-id");

    take_screenshot("success");

    this.then(function() {
        id = this.getElementAttribute("#test-item-id","item-id");
        this.test.assertNotEquals(id,null,"The item exists in DSpace with the ID " + id);
    });

    //get the bitstreams of the item

    this.then(function() {
        this.evaluate(function(id,un,pw) {
            var nb_utils = require("base/js/utils");
            var request_url = nb_utils.url_path_join(Jupyter.notebook.base_url,
                                                     "/dspace/getbitstreams");
            var settings = {
                processData : false,
                cache : false,
                type : "POST",
                contentType: "application/json",
                data: JSON.stringify({"ID":id, "username": un, "password": pw}),
            };
            var request = nb_utils.promising_ajax(request_url, settings);

            request.then(function(result) {
                for (var key in result) {
                    var item = result[key];
                    //don't check the license or sword package file because cba
                    //(if they're wrong it's something wrong with SWORD and not me)
                    if(item.bundleName === "ORIGINAL") { 
                        $(document.body).append($("<div/>")
                                                    .addClass("test-bitstream-id")
                                                    .attr("item-id",item.id));
                    }
                }
            });
        }, id,username,password);
    });

    this.waitForSelector(".test-bitstream-id");
    
    //get the content from the bitstreams

    this.then(function() {
        this.evaluate(function(un,pw) {
            var bitstreams = $(".test-bitstream-id");
            var IDs = [];
            bitstreams.each(function(index,item) {
                IDs.push($(item).attr("item-id"));
            });
            var nb_utils = require("base/js/utils");
            var request_url = nb_utils.url_path_join(Jupyter.notebook.base_url,
                                                     "/dspace/getbitstreamdata");
            var settings = {
                processData : false,
                cache : false,
                type : "POST",
                contentType: "application/json",
                data: JSON.stringify({"IDs":IDs,
                                      "username": un,
                                      "password": pw}),
            };
            var request = nb_utils.promising_ajax(request_url, settings);

            request.then(function(result) {
                for (var key in result) {
                    $(document.body).append($("<div/>")
                                                .addClass("test-bitstream-content")
                                                .attr("bitstream-content",result[key]));
                }
            });
        }, username, password);
    });

    this.waitForSelector(".test-bitstream-content");

    //test that the bitstream content is correct
    this.then(function() {
        var bitstream_data = this.getElementsAttribute(".test-bitstream-content",
                                                       "bitstream-content");
        
        this.test.assertNotEquals(
            bitstream_data.indexOf("Text in file_in_nbdir.txt"),
            -1,
            "file_in_nbdir.txt has correct content"
        );
        this.test.assertNotEquals(
            bitstream_data.indexOf("Text in file_in_sub_dir1.txt"),
            -1,
            "file_in_sub_dir1.txt has correct content"
        );
        this.test.assertNotEquals(
            bitstream_data.indexOf("Text in file_in_sub_dir1a.txt"),
            -1,
            "file_in_sub_dir1a.txt has correct content"
        );
        this.test.assertNotEquals(
            bitstream_data.indexOf("Test terms of service file to upload to DSpace"),
            -1,
            "TOS 0.txt has correct content"
        );
        
        this.test.assertNotEquals(
            bitstream_data.indexOf("Second test terms of service file to upload to DSpace"),
            -1,
            "TOS 1.txt has correct content"
        );
        
        var licence = bitstream_data[bitstream_data.length - 1];
        this.test.assertNotEquals(
            licence.indexOf("CC0 1.0 Universal"),
            -1,
            "LICENSE.txt has correct title"
        );
        
        this.test.assertNotEquals(
            licence.indexOf("statutory or otherwise, including without limitation warranties of"),
            -1,
            "LICENSE.txt has sample text present"
        );
    });

    var delete_once_finished = true; //used for testing the test

    //delete the item in dspace so we don't clutter up the test server
    if (delete_once_finished) {
        this.then(function() {
            this.evaluate(function(id,un,pw) {
                var nb_utils = require("base/js/utils");
                var request_url = nb_utils.url_path_join(Jupyter.notebook.base_url,
                                                         "/dspace/delete");
                var settings = {
                    processData : false,
                    type : "POST",
                    contentType: "application/json",
                    data: JSON.stringify({"ID":id,
                                          "username": un,
                                          "password": pw}),
                };
                var request = nb_utils.promising_ajax(request_url, settings);

                request.then(function(result) {
                    $(document.body).append($("<div/>")
                                                .attr("id","test-delete-status")
                                                .attr("status-code",result));
                });
            }, id,username,password);
        });

        this.waitForSelector("#test-delete-status");

        this.then(function() {
            var delete_status_code = this.getElementAttribute("#test-delete-status",
                                                              "status-code");
            this.test.assertEquals(
                delete_status_code,
                "404",
                "Item not found in DSpace so successfully deleted"
            );
        });
    }
});
